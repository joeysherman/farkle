/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 dice.glb --transform 
Files: dice.glb [744.73KB] > /Users/joey/Documents/Projects/vite-react-boilerplate-main/src/_game/modals/dice-transformed.glb [41.22KB] (94%)
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";
import { Select } from "@react-three/postprocessing";

export function Model(props) {
	const meshRef = useRef(null);
	const { nodes, materials } = useGLTF("/dice-transformed.glb");
	const {
		position,
		rotation,
		isScoringNumber,
		isSpinning = false,
		selected = false,
		onClick,
	} = props;
	const [hovered, setHovered] = useState(false);
	const diceMaterials = materials.Dice.clone();
	// if isScoringNumber is true, then we need to change the material of the dice to the scoring material
	if (isScoringNumber && selected) {
		// green
		diceMaterials.color = new THREE.Color(0, 1, 0);
	} else if (isScoringNumber && !selected) {
		// light green
		diceMaterials.color = new THREE.Color(0.5, 1, 0.5);
	}

	useFrame((_, delta) => {
		if (isSpinning && meshRef.current) {
			const rotationSpeed = 10;
			meshRef.current.rotation.x += delta * rotationSpeed;
			meshRef.current.rotation.y += delta * rotationSpeed;
			meshRef.current.rotation.z += delta * rotationSpeed;
		} else if (!isSpinning && meshRef.current) {
			meshRef.current.rotation.set(...rotation);
		}
	});

	useEffect(() => {
		if (meshRef.current) {
			if (selected) {
				meshRef.current.position.y += 0.5; // Move the model up by 0.5 units
			} else {
				meshRef.current.position.y = position[1]; // Reset to original position
			}
		}
	}, [selected]);

	return (
		<Select enabled={hovered && !isSpinning && isScoringNumber}>
			<group
				{...props}
				dispose={null}
				ref={meshRef}
				onPointerEnter={() => {
					setHovered(true);
				}}
				onPointerLeave={() => {
					setHovered(false);
				}}
				onClick={() => {
					console.log("clicked");
					if (isScoringNumber) {
						props.onClick();
					}
				}}
			>
				<mesh geometry={nodes.Cube_1.geometry} material={materials.Dot} />
				<mesh
					geometry={nodes.Cube_2.geometry}
					material={isScoringNumber ? diceMaterials : materials.Dice}
				/>
				<mesh
					geometry={nodes.Cube_3.geometry}
					material={materials["Red Dot"]}
				/>
			</group>
		</Select>
	);
}

//useGLTF.preload("/dice-transformed.glb");
